+ Rscript -e 'Sys.setenv(BIOCONDUCTOR_USE_CONTAINER_REPOSITORY=FALSE); p <- .libPaths(); p <- c('\''/tmp/tmp/built'\'', p); .libPaths(p); if(BiocManager::install('\''cytofQC'\'', INSTALL_opts = '\''--build'\'', update = TRUE, quiet = FALSE, dependencies=TRUE, force = TRUE, keep_outputs = TRUE) %in% rownames(installed.packages())) q(status = 0) else q(status = 1)'
'getOption("repos")' replaces Bioconductor standard repositories, see
'help("repositories", package = "BiocManager")' for details.
Replacement repositories:
    CRAN: https://cloud.r-project.org
Bioconductor version 3.17 (BiocManager 1.30.22), R 4.3.1 (2023-06-16)
Installing package(s) 'cytofQC'
also installing the dependencies ‘triebeard’, ‘urltools’, ‘httpcode’, ‘crul’, ‘fontBitstreamVera’, ‘fontLiberation’, ‘pracma’, ‘extrafontdb’, ‘Rttf2pt1’, ‘gfonts’, ‘fontquiver’, ‘proxy’, ‘ada’, ‘GA’, ‘optimx’, ‘glmnet’, ‘extrafont’, ‘gdtools’, ‘e1071’, ‘EZtune’, ‘gbm’, ‘hrbrthemes’, ‘randomForest’, ‘ssc’

trying URL 'https://cloud.r-project.org/src/contrib/triebeard_0.4.1.tar.gz'
Content type 'application/x-gzip' length 31450 bytes (30 KB)
==================================================
downloaded 30 KB

trying URL 'https://cloud.r-project.org/src/contrib/urltools_1.7.3.tar.gz'
Content type 'application/x-gzip' length 135778 bytes (132 KB)
==================================================
downloaded 132 KB

trying URL 'https://cloud.r-project.org/src/contrib/httpcode_0.3.0.tar.gz'
Content type 'application/x-gzip' length 17821 bytes (17 KB)
==================================================
downloaded 17 KB

trying URL 'https://cloud.r-project.org/src/contrib/crul_1.4.2.tar.gz'
Content type 'application/x-gzip' length 534901 bytes (522 KB)
==================================================
downloaded 522 KB

trying URL 'https://cloud.r-project.org/src/contrib/fontBitstreamVera_0.1.1.tar.gz'
Content type 'application/x-gzip' length 693959 bytes (677 KB)
==================================================
downloaded 677 KB

trying URL 'https://cloud.r-project.org/src/contrib/fontLiberation_0.1.0.tar.gz'
Content type 'application/x-gzip' length 4527421 bytes (4.3 MB)
==================================================
downloaded 4.3 MB

trying URL 'https://cloud.r-project.org/src/contrib/pracma_2.4.4.tar.gz'
Content type 'application/x-gzip' length 397815 bytes (388 KB)
==================================================
downloaded 388 KB

trying URL 'https://cloud.r-project.org/src/contrib/extrafontdb_1.0.tar.gz'
Content type 'application/x-gzip' length 1672 bytes
==================================================
downloaded 1672 bytes

trying URL 'https://cloud.r-project.org/src/contrib/Rttf2pt1_1.3.12.tar.gz'
Content type 'application/x-gzip' length 221360 bytes (216 KB)
==================================================
downloaded 216 KB

trying URL 'https://cloud.r-project.org/src/contrib/gfonts_0.2.0.tar.gz'
Content type 'application/x-gzip' length 2924543 bytes (2.8 MB)
==================================================
downloaded 2.8 MB

trying URL 'https://cloud.r-project.org/src/contrib/fontquiver_0.2.1.tar.gz'
Content type 'application/x-gzip' length 2233101 bytes (2.1 MB)
==================================================
downloaded 2.1 MB

trying URL 'https://cloud.r-project.org/src/contrib/proxy_0.4-27.tar.gz'
Content type 'application/x-gzip' length 74622 bytes (72 KB)
==================================================
downloaded 72 KB

trying URL 'https://cloud.r-project.org/src/contrib/ada_2.0-5.tar.gz'
Content type 'application/x-gzip' length 662536 bytes (647 KB)
==================================================
downloaded 647 KB

trying URL 'https://cloud.r-project.org/src/contrib/GA_3.2.4.tar.gz'
Content type 'application/x-gzip' length 3095080 bytes (3.0 MB)
==================================================
downloaded 3.0 MB

trying URL 'https://cloud.r-project.org/src/contrib/optimx_2023-10.21.tar.gz'
Content type 'application/x-gzip' length 3735842 bytes (3.6 MB)
==================================================
downloaded 3.6 MB

trying URL 'https://cloud.r-project.org/src/contrib/glmnet_4.1-8.tar.gz'
Content type 'application/x-gzip' length 2439515 bytes (2.3 MB)
==================================================
downloaded 2.3 MB

trying URL 'https://cloud.r-project.org/src/contrib/extrafont_0.19.tar.gz'
Content type 'application/x-gzip' length 16533 bytes (16 KB)
==================================================
downloaded 16 KB

trying URL 'https://cloud.r-project.org/src/contrib/gdtools_0.3.7.tar.gz'
Content type 'application/x-gzip' length 72067 bytes (70 KB)
==================================================
downloaded 70 KB

trying URL 'https://cloud.r-project.org/src/contrib/e1071_1.7-14.tar.gz'
Content type 'application/x-gzip' length 326383 bytes (318 KB)
==================================================
downloaded 318 KB

trying URL 'https://cloud.r-project.org/src/contrib/EZtune_3.1.1.tar.gz'
Content type 'application/x-gzip' length 1398458 bytes (1.3 MB)
==================================================
downloaded 1.3 MB

trying URL 'https://cloud.r-project.org/src/contrib/gbm_2.1.9.tar.gz'
Content type 'application/x-gzip' length 454992 bytes (444 KB)
==================================================
downloaded 444 KB

trying URL 'https://cloud.r-project.org/src/contrib/hrbrthemes_0.8.7.tar.gz'
Content type 'application/x-gzip' length 729886 bytes (712 KB)
==================================================
downloaded 712 KB

trying URL 'https://cloud.r-project.org/src/contrib/randomForest_4.7-1.1.tar.gz'
Content type 'application/x-gzip' length 80886 bytes (78 KB)
==================================================
downloaded 78 KB

trying URL 'https://cloud.r-project.org/src/contrib/ssc_2.1-0.tar.gz'
Content type 'application/x-gzip' length 447994 bytes (437 KB)
==================================================
downloaded 437 KB

trying URL 'https://bioconductor.org/packages/3.17/bioc/src/contrib/cytofQC_1.0.0.tar.gz'
Content type 'application/gzip' length 1562808 bytes (1.5 MB)
==================================================
downloaded 1.5 MB

* installing *source* package ‘triebeard’ ...
** package ‘triebeard’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -I../inst/include -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -I../inst/include -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c alter.cpp -o alter.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -I../inst/include -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c create.cpp -o create.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -I../inst/include -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c get.cpp -o get.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -I../inst/include -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c greedy_match.cpp -o greedy_match.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -I../inst/include -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c length.cpp -o length.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -I../inst/include -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c longest_match.cpp -o longest_match.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -I../inst/include -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c prefix_match.cpp -o prefix_match.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'    -I../inst/include -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c str.cpp -o str.o
g++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o triebeard.so RcppExports.o alter.o create.o get.o greedy_match.o length.o longest_match.o prefix_match.o str.o -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-triebeard/00new/triebeard/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘triebeard’ as ‘triebeard_0.4.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (triebeard)
* installing *source* package ‘httpcode’ ...
** package ‘httpcode’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘httpcode’ as ‘httpcode_0.3.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (httpcode)
* installing *source* package ‘fontBitstreamVera’ ...
** package ‘fontBitstreamVera’ successfully unpacked and MD5 sums checked
** using staged installation
** inst
** help
No man pages found in package  ‘fontBitstreamVera’ 
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘fontBitstreamVera’ as ‘fontBitstreamVera_0.1.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (fontBitstreamVera)
* installing *source* package ‘fontLiberation’ ...
** package ‘fontLiberation’ successfully unpacked and MD5 sums checked
** using staged installation
** inst
** help
No man pages found in package  ‘fontLiberation’ 
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘fontLiberation’ as ‘fontLiberation_0.1.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (fontLiberation)
* installing *source* package ‘pracma’ ...
** package ‘pracma’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** data
*** moving datasets to lazyload DB
** demo
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘pracma’ as ‘pracma_2.4.4_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (pracma)
* installing *source* package ‘extrafontdb’ ...
** package ‘extrafontdb’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘extrafontdb’ as ‘extrafontdb_1.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (extrafontdb)
* installing *source* package ‘Rttf2pt1’ ...
** package ‘Rttf2pt1’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
echo "make ttf2pt1 in ttf2pt1/ ..."
make ttf2pt1 in ttf2pt1/ ...
(cd ttf2pt1; make CC="`"/usr/lib/R/bin/R" CMD config CC`" CFLAGS="`"/usr/lib/R/bin/R" CMD config CFLAGS`" ttf2pt1)
make[1]: Entering directory '/tmp/Rtmp9TkDXX/R.INSTALL51a616ee414/Rttf2pt1/src/ttf2pt1'
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -c ttf2pt1.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -c pt1.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c runt1asm.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -c ttf.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -c ft.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -c bdf.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -c bitmap.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -o ttf2pt1 ttf2pt1.o pt1.o runt1asm.o ttf.o ft.o bdf.o bitmap.o -lm  
make[1]: Leaving directory '/tmp/Rtmp9TkDXX/R.INSTALL51a616ee414/Rttf2pt1/src/ttf2pt1'
installing via 'install.libs.R' to /tmp/tmp/built/00LOCK-Rttf2pt1/00new/Rttf2pt1
[1] ""
Installing ttf2pt1/ttf2pt1 to /tmp/tmp/built/00LOCK-Rttf2pt1/00new/Rttf2pt1/exec
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘Rttf2pt1’ as ‘Rttf2pt1_1.3.12_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (Rttf2pt1)
* installing *source* package ‘proxy’ ...
** package ‘proxy’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c apply.c -o apply.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c arrayIndex.c -o arrayIndex.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c distance.c -o distance.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c dll.c -o dll.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c util.c -o util.o
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o proxy.so apply.o arrayIndex.o distance.o dll.o util.o -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-proxy/00new/proxy/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘proxy’ as ‘proxy_0.4-27_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (proxy)
* installing *source* package ‘ada’ ...
** package ‘ada’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** data
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘ada’ as ‘ada_2.0-5_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ada)
* installing *source* package ‘GA’ ...
** package ‘GA’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
using C++ compiler: ‘g++ (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/usr/local/lib/R/site-library/RcppArmadillo/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/usr/local/lib/R/site-library/RcppArmadillo/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c genope.cpp -o genope.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/usr/local/lib/R/site-library/RcppArmadillo/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c init.c -o init.o
g++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o GA.so RcppExports.o genope.o init.o -llapack -lblas -lgfortran -lm -lquadmath -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-GA/00new/GA/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘GA’ as ‘GA_3.2.4_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (GA)
* installing *source* package ‘glmnet’ ...
** package ‘glmnet’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
using Fortran compiler: ‘GNU Fortran (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
using C++ compiler: ‘g++ (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
using C++17
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'    -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c RcppExports.cpp -o RcppExports.o
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:205,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:46:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   46 | typedef eigen_packet_wrapper<__m128i, 0> Packet4i;
      |                                        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:47:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   47 | typedef eigen_packet_wrapper<__m128i, 1> Packet16b;
      |                                        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:49:39: warning: ignoring attributes on template argument ‘__m128’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   49 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:50:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   50 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:51:40: warning: ignoring attributes on template argument ‘__m128d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   51 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:222:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  222 | template<> struct unpacket_traits<Packet4f> {
      |                                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:228:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  228 | template<> struct unpacket_traits<Packet2d> {
      |                                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1124:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
 1124 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1129:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1129 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:174,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:165,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:265:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:24:46:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<float>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:27:3:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:165,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:265:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:98:47:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:102:3:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/tmp/tmp/built/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:165,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, -1>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:18:8:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:111:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
RcppExports.cpp:26:87:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:24:30:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:111:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
RcppExports.cpp:26:87:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
RcppExports.cpp:26:87:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, -1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:24:30:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:111:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
RcppExports.cpp:47:170:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
RcppExports.cpp:47:170:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
RcppExports.cpp:59:98:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
gfortran  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong  -c coxnet5dpclean.f -o coxnet5dpclean.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'    -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c elnet_exp.cpp -o elnet_exp.o
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:205,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:46:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   46 | typedef eigen_packet_wrapper<__m128i, 0> Packet4i;
      |                                        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:47:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   47 | typedef eigen_packet_wrapper<__m128i, 1> Packet16b;
      |                                        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:49:39: warning: ignoring attributes on template argument ‘__m128’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   49 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:50:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   50 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:51:40: warning: ignoring attributes on template argument ‘__m128d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   51 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:222:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  222 | template<> struct unpacket_traits<Packet4f> {
      |                                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:228:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  228 | template<> struct unpacket_traits<Packet2d> {
      |                                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1124:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
 1124 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1129:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1129 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:174,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:165,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:265:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:24:46:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<float>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:27:3:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:165,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:265:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:98:47:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:102:3:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/tmp/tmp/built/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:165,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, -1>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, -1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:18:8:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:111:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, -1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:24:30:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:111:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:10:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:38:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:48:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:49:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
elnet_exp.cpp:44:5:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
elnet_exp.cpp:98:5:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Matrix<double, -1, -1>, -1, 1, true, true>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<Eigen::Matrix<double, -1, -1>, -1, 1, true, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:433:31:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:437:43:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:437:43:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Matrix<double, -1, -1>, 1, -1, false, true>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<Eigen::Matrix<double, -1, -1>, 1, -1, false, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:293:34:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:243:36:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:243:24:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:243:24:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/base.hpp:12:20:   required from ‘void glmnetpp::ElnetDriverBase::normalize_penalty(VType&&) const [with VType = Eigen::Matrix<double, -1, 1>&]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:402:13:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Matrix<double, -1, -1>, -1, 1, true, true>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<const Eigen::Matrix<double, -1, -1>, -1, 1, true, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:16:38:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false, true>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/VectorBlock.h:56:47:   required from ‘class Eigen::VectorBlock<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1>’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:16:18:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:17:39:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:37:36:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:37:15:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:52:29:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:74:56:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:74:41:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:88:48:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:88:35:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:41:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator/=(const Scalar&) [with Derived = Eigen::Matrix<double, -1, -1>; Eigen::DenseBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:430:16:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:20:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator*=(const Scalar&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Eigen::DenseBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:433:31:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:338:33:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:36:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:47:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:56:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:276:47:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 1, -1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 1, -1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 1, -1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 1, -1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:41:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator/=(const Scalar&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; Eigen::DenseBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:294:37:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:41:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator/=(const Scalar&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; Eigen::DenseBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:294:37:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:51:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:60:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:399:22:   required from ‘static void glmnetpp::MultSpStandardize1::eval(const XType&, YType&, WType&, bool, bool, bool, const JUType&, XMType&, XSType&, YMType&, YSType&, XVType&, ValueType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; YMType = Eigen::Matrix<double, -1, 1>; YSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; ValueType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:548:32:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:277,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1383:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1464:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:21:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/BooleanRedux.h:108:35:   required from ‘bool Eigen::DenseBase<Derived>::any() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:17:19:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1042 |   enum {
      |        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1383:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1464:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:21:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/BooleanRedux.h:108:35:   required from ‘bool Eigen::DenseBase<Derived>::any() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:17:19:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:98:43:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:53:23:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:336:80:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:282:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:430:10:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, Eigen::internal::IteratorBased, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1087:8:   required from ‘struct Eigen::internal::block_evaluator<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true, false>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1034:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; Derived = Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:277,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; Derived = Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1042 |   enum {
      |        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:357:7:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:414:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:293:23:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:125:29:   required from ‘static void glmnetpp::Standardize::eval(XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:98:43:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:110:23:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::norm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:46:16:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:87:16:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:343:29:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:149:16:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:344:29:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:149:16:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:27:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:255:7:   required from ‘class Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_cov.hpp:96:31:   required from ‘struct glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_cov.hpp:159:16:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_cov.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:173:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:23:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:525:26:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:474:25:   required from ‘static void glmnetpp::LStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:303:36:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:400:22:   required from ‘static void glmnetpp::MultSpStandardize1::eval(const XType&, YType&, WType&, bool, bool, bool, const JUType&, XMType&, XSType&, YMType&, YSType&, XVType&, ValueType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; YMType = Eigen::Matrix<double, -1, 1>; YSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; ValueType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:548:32:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:277,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:564:21:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:357:7:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:414:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:98:22:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:53:23:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1042 |   enum {
      |        ^
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Matrix<double, -1, 1>; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::Matrix<double, -1, 1>; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::Matrix<double, -1, 1> >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:296:18:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:174:38:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:40:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:48:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:31:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:36:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:31:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:19:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:406:19:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:406:31:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:406:19:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:408:30:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, 1, -1, 1, 1, -1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, 1, -1, 1, 1, -1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, 1, -1, 1, 1, -1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, 1, -1, 1, 1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, 1, -1, 1, 1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, 1, -1, 1, 1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:408:30:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:34:67:   required from ‘Derived& Eigen::ArrayBase<Derived>::operator-=(const Scalar&) [with Derived = Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; Eigen::ArrayBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:408:30:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:70:50:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:70:50:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:82:44:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:88:40:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:86:50:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:108:58:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:108:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:185:73:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:225:9:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:185:87:   required from ‘auto glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::prediction() const [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_base.hpp:140:16:   required from ‘void glmnetpp::ElnetPathPoissonBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:225:9:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:98:22:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:53:23:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:87:26:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:62:54:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, YType&, const WType&, const XType&, const XMType&, const XSType&, const XVType&, const VPType&, const CLType&, const JUType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:87:43:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:62:54:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, YType&, const WType&, const XType&, const XMType&, const XSType&, const XVType&, const VPType&, const CLType&, const JUType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:88:29:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:89:19:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:32:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:41:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:49:   required from ‘static typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::compute_xv(const XType&, const WType&) [with XType = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:71:52:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:336:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:340:48:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:340:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:22:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:34:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:19:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:23:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:404:35:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:404:54:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:404:47:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:27:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:46:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:352:40:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:352:35:   required from ‘void glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::construct(XVFType, GradFType) [with XVFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:70:9:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:352:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:355:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:355:51:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:355:51:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:354:30:   required from ‘void glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::construct(XVFType, GradFType) [with XVFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:70:9:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:118:37:   required from ‘class Eigen::TransposeImpl<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:40:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:49:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:57:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t, const WType&) const [with WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:73:69:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, ISType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Matrix<double, -1, -1>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; ISType = Eigen::Matrix<int, -1, 1>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1402:14:   required from ‘typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t, const WType&) const [with WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_two_class.hpp:76:62:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1409:56:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1409:44:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1409:14:   required from ‘typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t, const RType&, const VType&) const [with RType = Eigen::Matrix<double, -1, 1>; VType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_two_class.hpp:77:64:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:130:48:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:21:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:163:38:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:57:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:69:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:161:78:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:136:54:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:138:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:138:54:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:139:68:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:137:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:137:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:161:78:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:168:65:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:21:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:60:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:69:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:21:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:171:73:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:171:81:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:21:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:169:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:169:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:125:29:   required from ‘static void glmnetpp::Standardize::eval(XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:98:22:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:110:23:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::norm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:46:16:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:87:16:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:27:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:336:80:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:292:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:430:10:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::internal::IteratorBased, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1087:8:   required from ‘struct Eigen::internal::block_evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, false>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1034:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:277,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:565:53:   required from ‘struct Eigen::internal::sparse_conjunction_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::IteratorBased, Eigen::internal::IndexBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:352:8:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::IteratorBased, Eigen::internal::IndexBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:89:19:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1042 |   enum {
      |        ^
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:23:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:525:26:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:474:25:   required from ‘static void glmnetpp::LStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:303:36:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:277,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1383:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1464:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:21:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:15:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1042 |   enum {
      |        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1383:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1464:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:21:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:15:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:538:9:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, RType&&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1166:33:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:589:25:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_EQ>, const Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_EQ>, const Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:598:35:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:660:42:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:40:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:660:48:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:40:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:660:15:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:40:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double, double>, 1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double, double>, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double, double>, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/VectorwiseOp.h:56:7:   required from ‘class Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double, double>, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:661:15:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:40:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:603:47:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:603:47:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:51:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:51:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:21:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:605:36:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:608:37:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:608:37:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:608:19:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1206:39:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1207:44:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1207:26:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1206:39:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1207:57:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1234:47:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1234:80:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1234:86:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1238:53:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1238:82:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1238:88:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true, true>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:113:48:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:43&)> [with auto:43 = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:904:24:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1381:54:   required from ‘void glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::update_with_new_weights(typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t, const VType&, typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t&) [with VType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_two_class.hpp:121:55:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:179:13:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:43:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Matrix<double, -1, 1>&; YT = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:164:33:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:11:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Matrix<double, -1, 1>&; YT = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:164:33:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:137:50:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:50&)> [with auto:50 = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:904:24:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:277,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:101:54:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>::<lambda(auto:65)> [with auto:65 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>::<lambda(auto:65)>; SkipPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>::<lambda(auto:66)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:100:51:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1042 |   enum {
      |        ^
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:118:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_multi.hpp:83:38:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Product.h:120:7:   required from ‘class Eigen::internal::dense_product_base<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, 7>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Product.h:152:7:   required from ‘class Eigen::ProductImpl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Product.h:71:7:   required from ‘class Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_multi.hpp:83:38:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:400:22:   required from ‘static void glmnetpp::MultSpStandardize1::eval(const XType&, YType&, WType&, bool, bool, bool, const JUType&, XMType&, XSType&, YMType&, YSType&, XVType&, ValueType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; YMType = Eigen::Matrix<double, -1, 1>; YSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; ValueType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:548:32:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:101:40:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:108:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:101:40:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:108:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:101:59:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:108:9:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:68:81:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:43:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&; YT = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:538:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:11:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&; YT = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:538:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, -1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, -1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, -1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, -1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, -1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, -1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:643:34:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:645:27:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:648:50:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:647:19:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1044:51:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1044:51:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1044:62:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:84:33:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_multi.hpp:39:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:118:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:50:35:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:50:60:   required from ‘static Eigen::internal::dot_nocheck<T, U, true>::ResScalar Eigen::internal::dot_nocheck<T, U, true>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>; U = Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>; Eigen::internal::dot_nocheck<T, U, true>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:277,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:357:7:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:414:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:598:54:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1042 |   enum {
      |        ^
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:118:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Matrix<double, -1, -1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:124:52:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Product.h:120:7:   required from ‘class Eigen::internal::dense_product_base<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, 7>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Product.h:152:7:   required from ‘class Eigen::ProductImpl<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Product.h:71:7:   required from ‘class Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:124:52:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:531:48:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&; YT = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:546:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:647:19:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Product.h:120:7:   required from ‘class Eigen::internal::dense_product_base<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, 7>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Product.h:152:7:   required from ‘class Eigen::ProductImpl<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Product.h:71:7:   required from ‘class Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:155:52:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:156:37:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, DestType&&) const [with DestType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:162:9:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:86:30:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::update(typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t, const PointPackType&, DiffType&&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >; glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t = glmnetpp::util::control_flow; typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:62:53:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:55:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:9:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:38:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:9:   required from ‘typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t glmnetpp::ElnetPointGaussianBase<Derived>::update(typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::index_t, const PointPackType&, DiffType&&) [with typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >; typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_multi.hpp:37:50:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:38:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:9:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:277,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1383:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1464:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:21:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1042 |   enum {
      |        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:58:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:357:7:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:414:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_cov.hpp:88:14:   required from ‘static auto glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::compute_sp_cov(const X1Type&, const X2Type&, const WType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t) [with X1Type = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; X2Type = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_cov.hpp:65:42:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::update_active(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::index_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:81:25:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::update(typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t, const PointPackType&, DiffType&&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; PointPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >; glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t = glmnetpp::util::control_flow; typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:62:53:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_cov.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:173:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:277,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1383:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1464:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:564:21:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, Eigen::internal::IndexBased, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1042 |   enum {
      |        ^
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:99:47:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:179:13:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:277,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:310:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:21:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1042 |   enum {
      |        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:58:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:357:7:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:414:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:91:45:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:89:39:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&, DiffType&&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:141:9:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:86:30:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::update(typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t, const PointPackType&, DiffType&&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t = glmnetpp::util::control_flow; typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:127:53:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:80:43:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:138:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&, DiffType&&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:141:9:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:321:58:   required from ‘void glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::update_dlx(const Eigen::MatrixBase<OtherDerived>&, typename glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::base_t::value_t) [with T = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:578:27:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:206:66:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:49:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:142:43:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:322:14:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:405:26:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:354:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Matrix<double, -1, 1>&; XType = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:89:39:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; Func = Eigen::internal::scalar_max_op<double, double, 0>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_max_op<double, double, 0>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:448:89:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::maxCoeff() const [with int NaNPropagation = 0; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:466:38:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::maxCoeff() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1205:25:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:219:27:   required from ‘static constexpr bool glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::equal(const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<OtherDerived>&) [with T1 = Eigen::Matrix<double, -1, 1>; T2 = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:75:9:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:80:43:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:57:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:91:43:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&, DiffType&&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/binomial_multi_class_group.hpp:34:37:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Matrix<double, -1, 1>&; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:138:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&, DiffType&&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:141:9:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:31:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, AType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, GCurrType&&, GNextType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<int, -1, 1>&; CLType = Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:22&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:617:9:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:25:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, AType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, GCurrType&&, GNextType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<int, -1, 1>&; CLType = Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:22&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:617:9:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:49:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:570:18:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:21:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:610:21:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true>, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true, true>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true, true>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:21:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:9:   required from ‘typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t glmnetpp::ElnetPointGaussianBase<Derived>::update(typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::index_t, const PointPackType&, DiffType&&) [with typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >; typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_multi.hpp:37:50:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:31:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, AType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, GCurrType&&, GNextType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<double, -1, 1>&; CLType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::index_t, const ComputeGradFType&) [with ComputeGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(auto:38, auto:39)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1187:38:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:25:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, AType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, GCurrType&&, GNextType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<double, -1, 1>&; CLType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::index_t, const ComputeGradFType&) [with ComputeGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(auto:38, auto:39)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1187:38:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:57:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:333,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h: In instantiation of ‘class Eigen::internal::gemv_traits<double, double, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:306:38:   required from ‘struct Eigen::internal::general_matrix_vector_product<long int, double, Eigen::internal::const_blas_data_mapper<double, long int, 1>, 1, false, double, Eigen::internal::const_blas_data_mapper<double, long int, 0>, false, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/GeneralProduct.h:347:132:   required from ‘static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Dest = Eigen::Matrix<double, -1, 1>; typename Dest::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:388:34:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>; Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:349:33:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:148:43:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   51 |         Vectorizable = unpacket_traits<_LhsPacket>::vectorizable &&
      |                                                     ~~~~~~~~~~~~~^~
   52 |         unpacket_traits<_RhsPacket>::vectorizable &&
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                 
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:9: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   53 |         int(unpacket_traits<_LhsPacket>::size)==int(unpacket_traits<_RhsPacket>::size),
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:9: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:9: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:9: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:49: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   53 |         int(unpacket_traits<_LhsPacket>::size)==int(unpacket_traits<_RhsPacket>::size),
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:49: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:49: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:49: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   54 |         LhsPacketSize = Vectorizable ? unpacket_traits<_LhsPacket>::size : 1,
      |                         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:38: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |         RhsPacketSize = Vectorizable ? unpacket_traits<_RhsPacket>::size : 1,
      |                         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:38: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |         ResPacketSize = Vectorizable ? unpacket_traits<_ResPacket>::size : 1
      |                         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:38: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   59 |   typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;
      |                                                                         ^~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   60 |   typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;
      |                                                                         ^~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   61 |   typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;
      |                                                                         ^~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h: In instantiation of ‘class Eigen::internal::gemv_traits<double, double, 1>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:310:42:   required from ‘struct Eigen::internal::general_matrix_vector_product<long int, double, Eigen::internal::const_blas_data_mapper<double, long int, 1>, 1, false, double, Eigen::internal::const_blas_data_mapper<double, long int, 0>, false, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/GeneralProduct.h:347:132:   required from ‘static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Dest = Eigen::Matrix<double, -1, 1>; typename Dest::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:388:34:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>; Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:349:33:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:148:43:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   51 |         Vectorizable = unpacket_traits<_LhsPacket>::vectorizable &&
      |                                                     ~~~~~~~~~~~~~^~
   52 |         unpacket_traits<_RhsPacket>::vectorizable &&
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                 
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:9: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   53 |         int(unpacket_traits<_LhsPacket>::size)==int(unpacket_traits<_RhsPacket>::size),
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:9: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:9: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:9: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:49: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   53 |         int(unpacket_traits<_LhsPacket>::size)==int(unpacket_traits<_RhsPacket>::size),
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:49: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:49: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:49: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   54 |         LhsPacketSize = Vectorizable ? unpacket_traits<_LhsPacket>::size : 1,
      |                         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:38: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |         RhsPacketSize = Vectorizable ? unpacket_traits<_RhsPacket>::size : 1,
      |                         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:38: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |         ResPacketSize = Vectorizable ? unpacket_traits<_ResPacket>::size : 1
      |                         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:38: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   59 |   typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;
      |                                                                         ^~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   60 |   typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;
      |                                                                         ^~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   61 |   typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;
      |                                                                         ^~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h: In instantiation of ‘class Eigen::internal::gemv_traits<double, double, 2>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:314:45:   required from ‘struct Eigen::internal::general_matrix_vector_product<long int, double, Eigen::internal::const_blas_data_mapper<double, long int, 1>, 1, false, double, Eigen::internal::const_blas_data_mapper<double, long int, 0>, false, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/GeneralProduct.h:347:132:   required from ‘static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Dest = Eigen::Matrix<double, -1, 1>; typename Dest::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:388:34:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>; Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:349:33:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:148:43:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   51 |         Vectorizable = unpacket_traits<_LhsPacket>::vectorizable &&
      |                                                     ~~~~~~~~~~~~~^~
   52 |         unpacket_traits<_RhsPacket>::vectorizable &&
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                 
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:66: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:9: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   53 |         int(unpacket_traits<_LhsPacket>::size)==int(unpacket_traits<_RhsPacket>::size),
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:9: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:9: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:9: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:49: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   53 |         int(unpacket_traits<_LhsPacket>::size)==int(unpacket_traits<_RhsPacket>::size),
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:49: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:49: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:49: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   54 |         LhsPacketSize = Vectorizable ? unpacket_traits<_LhsPacket>::size : 1,
      |                         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:38: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |         RhsPacketSize = Vectorizable ? unpacket_traits<_RhsPacket>::size : 1,
      |                         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:38: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |         ResPacketSize = Vectorizable ? unpacket_traits<_ResPacket>::size : 1
      |                         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:38: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   59 |   typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;
      |                                                                         ^~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   60 |   typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;
      |                                                                         ^~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   61 |   typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;
      |                                                                         ^~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   [ skipping 16 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true>, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true, true>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:118:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Transpose<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Transpose<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseTranspose.h:22:9:   required from ‘class Eigen::internal::SparseTransposeImpl<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 1024>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseTranspose.h:45:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseDenseProduct.h:216:40:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::SparseShape, ProductType>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; int ProductType = 7; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::SparseShape, ProductType>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:118:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseDenseProduct.h:216:40:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:118:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:50:35:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:50:60:   required from ‘static Eigen::internal::dot_nocheck<T, U, true>::ResScalar Eigen::internal::dot_nocheck<T, U, true>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true>; U = Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>; Eigen::internal::dot_nocheck<T, U, true>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_cov.hpp:55:75:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 2, -1, true>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 2, -1, true>, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 2, -1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 2, -1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 2, -1, true>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Matrix<double, -1, -1>, 2, -1, true, true>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:277,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 2, -1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:357:7:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 2, -1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PartialReduxEvaluator.h:217:20:   required from ‘PacketType Eigen::internal::evaluator<Eigen::PartialReduxExpr<MatrixType, MemberOp, Direction> >::packet(Eigen::Index) const [with int LoadMode = 0; PacketType = __vector(2) double; ArgType = Eigen::Matrix<double, -1, -1>; MemberOp = Eigen::internal::member_sum<double, double>; int Direction = 1; Eigen::Index = long int]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:681:5:   required from ‘void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignPacket(Eigen::Index) [with int StoreMode = 16; int LoadMode = 0; PacketType = __vector(2) double; DstEvaluatorTypeT = Eigen::internal::evaluator<Eigen::Matrix<double, -1, 1> >; SrcEvaluatorTypeT = Eigen::internal::evaluator<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double, double>, 1> >; Functor = Eigen::internal::assign_op<double, double>; int Version = 0; Eigen::Index = long int]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:437:7:   required from ‘static void Eigen::internal::dense_assignment_loop<Kernel, 3, 0>::run(Kernel&) [with Kernel = Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<double, -1, 1> >, Eigen::internal::evaluator<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double, double>, 1> >, Eigen::internal::assign_op<double, double>, 0>]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:785:37:   required from ‘void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<double, -1, 1>; SrcXprType = Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double, double>, 1>; Functor = Eigen::internal::assign_op<double, double>]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:954:31:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1042 |   enum {
      |        ^
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:98:43:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:703:14:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; Func = Eigen::internal::scalar_max_op<double, double, 0>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_max_op<double, double, 0>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:448:89:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::maxCoeff() const [with int NaNPropagation = 0; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:466:38:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::maxCoeff() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:321:27:   required from ‘void glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::update_dlx(const Eigen::MatrixBase<OtherDerived>&, typename glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::base_t::value_t) [with T = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:578:27:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Matrix<double, -1, -1>, 1, -1, false, true>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 16 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:118:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:50:35:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:50:60:   required from ‘static Eigen::internal::dot_nocheck<T, U, true>::ResScalar Eigen::internal::dot_nocheck<T, U, true>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true>; U = Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>; Eigen::internal::dot_nocheck<T, U, true>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:277,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:310:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, Eigen::internal::IndexBased, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:21:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   [ skipping 17 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1042 |   enum {
      |        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:58:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:357:7:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:414:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:310:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, Eigen::internal::IndexBased, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:21:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:50:64:   required from ‘static Eigen::internal::dot_nocheck<T, U, true>::ResScalar Eigen::internal::dot_nocheck<T, U, true>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true>; U = Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>; Eigen::internal::dot_nocheck<T, U, true>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>; Derived = Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:380:34:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:277,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:357:7:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:414:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/VectorwiseOp.h:114:1:   required from ‘ResultType Eigen::internal::member_sum<ResultType, Scalar>::operator()(const XprType&) const [with XprType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>; ResultType = double; Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PartialReduxEvaluator.h:183:79:   required from ‘const Scalar Eigen::internal::evaluator<Eigen::PartialReduxExpr<MatrixType, MemberOp, Direction> >::coeff(Eigen::Index) const [with ArgType = Eigen::Matrix<double, -1, -1>; MemberOp = Eigen::internal::member_sum<double, double>; int Direction = 1; Eigen::internal::evaluator<Eigen::PartialReduxExpr<MatrixType, MemberOp, Direction> >::Scalar = double; Eigen::Index = long int]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PartialReduxEvaluator.h:214:41:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1042 |   enum {
      |        ^
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:50:64:   required from ‘static Eigen::internal::dot_nocheck<T, U, true>::ResScalar Eigen::internal::dot_nocheck<T, U, true>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true>; U = Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>; Eigen::internal::dot_nocheck<T, U, true>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>; Derived = Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:380:34:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'    -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c glmnet_init.cpp -o glmnet_init.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'    -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c internal.cpp -o internal.o
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:205,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:46:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   46 | typedef eigen_packet_wrapper<__m128i, 0> Packet4i;
      |                                        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:47:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   47 | typedef eigen_packet_wrapper<__m128i, 1> Packet16b;
      |                                        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:49:39: warning: ignoring attributes on template argument ‘__m128’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   49 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:50:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   50 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:51:40: warning: ignoring attributes on template argument ‘__m128d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   51 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:222:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  222 | template<> struct unpacket_traits<Packet4f> {
      |                                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:228:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  228 | template<> struct unpacket_traits<Packet2d> {
      |                                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1124:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
 1124 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1129:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1129 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:174,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:165,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:265:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:24:46:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<float>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:27:3:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:165,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:265:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:98:47:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:102:3:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/tmp/tmp/built/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c pb.c -o pb.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'    -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c pb_exp.cpp -o pb_exp.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'    -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c wls_exp.cpp -o wls_exp.o
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:205,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:46:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   46 | typedef eigen_packet_wrapper<__m128i, 0> Packet4i;
      |                                        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:47:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   47 | typedef eigen_packet_wrapper<__m128i, 1> Packet16b;
      |                                        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:49:39: warning: ignoring attributes on template argument ‘__m128’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   49 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:50:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   50 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:51:40: warning: ignoring attributes on template argument ‘__m128d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   51 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:222:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  222 | template<> struct unpacket_traits<Packet4f> {
      |                                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:228:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  228 | template<> struct unpacket_traits<Packet2d> {
      |                                           ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1124:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
 1124 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1129:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1129 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:174,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:165,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:265:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:24:46:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<float>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:27:3:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:165,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:265:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:98:47:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:102:3:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/tmp/tmp/built/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:165,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, -1>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, -1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:18:8:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:111:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, -1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:24:30:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:111:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:10:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:38:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:48:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:49:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 3>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
wls_exp.cpp:40:5:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:796:8:   required from ‘struct glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:10:8:   required from ‘struct glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:52:17:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:796:8:   required from ‘struct glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:10:8:   required from ‘struct glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:52:17:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
wls_exp.cpp:113:5:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:255:7:   required from ‘class Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:150:32:   required from ‘struct glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
glmnetpp/include/glmnetpp_bits/elnet_point/sp_gaussian_wls.hpp:7:8:   required from ‘struct glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:125:17:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:26:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:34:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:43:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:52:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:32:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:56:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:336:80:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:292:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:430:10:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::internal::IteratorBased, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1087:8:   required from ‘struct Eigen::internal::block_evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, false>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1034:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:334:8:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IteratorBased, Eigen::internal::IteratorBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:17:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:277,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:407:54:   required from ‘struct Eigen::internal::sparse_conjunction_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IteratorBased, Eigen::internal::IteratorBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:334:8:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IteratorBased, Eigen::internal::IteratorBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:17:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1042 |   enum {
      |        ^
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:70:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:206:66:   required from ‘static auto glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::compute_grad(const RType&, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:118:36:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:123:25:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:75:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::Map<Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:83:14:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:277,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1383:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1464:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:564:21:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, Eigen::internal::IndexBased, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:70:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1042 |   enum {
      |        ^
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:92:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:928:52:   required from ‘auto glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::update_intercept(typename glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:99:33:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_intercept() [with ValueType = double; IndexType = int; BoolType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:55:9:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:928:52:   required from ‘auto glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::update_intercept(typename glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:99:33:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_intercept() [with ValueType = double; IndexType = int; BoolType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:55:9:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:110:27:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:57:9:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::update(typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t, const PointPackType&) [with typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>; typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:109:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:57:9:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::update(typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t, const PointPackType&) [with typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>; typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >&; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:92:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/SparseCore:37,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Sparse:26,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:29,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Sparse>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >&; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:109:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:57:9:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::update(typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t, const PointPackType&) [with typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>; typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:70:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Redux.h:463:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:206:66:   required from ‘static auto glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::compute_grad(const RType&, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:118:36:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:123:25:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:75:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:277,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:45:7:   required from ‘Eigen::CwiseBinaryOpImpl<BinaryOp, Lhs, Rhs, Eigen::Sparse>::CwiseBinaryOpImpl() [with BinaryOp = Eigen::internal::scalar_product_op<double, double>; Lhs = const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Rhs = const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:111:49:   required from ‘Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::CwiseBinaryOp(const Lhs&, const Rhs&, const BinaryOp&) [with BinaryOp = Eigen::internal::scalar_product_op<double, double>; LhsType = const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; RhsType = const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:689:62:   required from ‘const typename Eigen::SparseMatrixBase<Derived>::CwiseProductDenseReturnType<OtherDerived>::Type Eigen::SparseMatrixBase<Derived>::cwiseProduct(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::SparseMatrixBase<Derived>::CwiseProductDenseReturnType<OtherDerived>::Type = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:109:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
 1042 |   enum {
      |        ^
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:21:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:58:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1042:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /tmp/tmp/built/RcppEigen/include/Eigen/Core:271,
                 from /tmp/tmp/built/RcppEigen/include/Eigen/Dense:1,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigenForward.h:28,
                 from /tmp/tmp/built/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >, 0>’:
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:347:30:   required from ‘Derived& Eigen::DenseBase<Derived>::setConstant(const Scalar&) [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; Eigen::DenseBase<Derived>::Scalar = double]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:548:10:   required from ‘Derived& Eigen::DenseBase<Derived>::setZero() [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >]’
/tmp/tmp/built/RcppEigen/include/Eigen/src/SparseCore/SparseAssign.h:143:7:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/tmp/tmp/built/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
g++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o glmnet.so RcppExports.o coxnet5dpclean.o elnet_exp.o glmnet_init.o internal.o pb.o pb_exp.o wls_exp.o -lgfortran -lm -lquadmath -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-glmnet/00new/glmnet/libs
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘glmnet’ as ‘glmnet_4.1-8_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (glmnet)
* installing *source* package ‘gbm’ ...
** package ‘gbm’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
using C++ compiler: ‘g++ (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c adaboost.cpp -o adaboost.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c bernoulli.cpp -o bernoulli.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c coxph.cpp -o coxph.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c dataset.cpp -o dataset.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c distribution.cpp -o distribution.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c gaussian.cpp -o gaussian.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c gbm-init.c -o gbm-init.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c gbm.cpp -o gbm.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c gbm_engine.cpp -o gbm_engine.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c gbmentry.cpp -o gbmentry.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c huberized.cpp -o huberized.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c laplace.cpp -o laplace.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c locationm.cpp -o locationm.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c multinomial.cpp -o multinomial.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c node.cpp -o node.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c node_categorical.cpp -o node_categorical.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c node_continuous.cpp -o node_continuous.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c node_factory.cpp -o node_factory.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c node_nonterminal.cpp -o node_nonterminal.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c node_search.cpp -o node_search.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c node_terminal.cpp -o node_terminal.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c pairwise.cpp -o pairwise.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c poisson.cpp -o poisson.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c quantile.cpp -o quantile.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c tdist.cpp -o tdist.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c tree.cpp -o tree.o
g++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o gbm.so adaboost.o bernoulli.o coxph.o dataset.o distribution.o gaussian.o gbm-init.o gbm.o gbm_engine.o gbmentry.o huberized.o laplace.o locationm.o multinomial.o node.o node_categorical.o node_continuous.o node_factory.o node_nonterminal.o node_search.o node_terminal.o pairwise.o poisson.o quantile.o tdist.o tree.o -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-gbm/00new/gbm/libs
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘gbm’ as ‘gbm_2.1.9_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (gbm)
* installing *source* package ‘randomForest’ ...
** package ‘randomForest’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
using Fortran compiler: ‘GNU Fortran (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c classTree.c -o classTree.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c init.c -o init.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c regTree.c -o regTree.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c regrf.c -o regrf.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c rf.c -o rf.o
gfortran  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong  -c rfsub.f -o rfsub.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c rfutils.c -o rfutils.o
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o randomForest.so classTree.o init.o regTree.o regrf.o rf.o rfsub.o rfutils.o -lgfortran -lm -lquadmath -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-randomForest/00new/randomForest/libs
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘randomForest’ as ‘randomForest_4.7-1.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (randomForest)
* installing *source* package ‘urltools’ ...
** package ‘urltools’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
using C++ compiler: ‘g++ (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c compose.cpp -o compose.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c credentials.cpp -o credentials.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c encoding.cpp -o encoding.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c parameter.cpp -o parameter.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c parsing.cpp -o parsing.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c puny.cpp -o puny.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c punycode.c -o punycode.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c suffix.cpp -o suffix.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c utf8.c -o utf8.o
g++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o urltools.so RcppExports.o compose.o credentials.o encoding.o parameter.o parsing.o puny.o punycode.o suffix.o utf8.o -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-urltools/00new/urltools/libs
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘urltools’ as ‘urltools_1.7.3_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (urltools)
* installing *source* package ‘fontquiver’ ...
** package ‘fontquiver’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘fontquiver’ as ‘fontquiver_0.2.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (fontquiver)
* installing *source* package ‘optimx’ ...
** package ‘optimx’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘optimx’ as ‘optimx_2023-10.21_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (optimx)
* installing *source* package ‘extrafont’ ...
** package ‘extrafont’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘extrafont’ as ‘extrafont_0.19_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (extrafont)
* installing *source* package ‘e1071’ ...
** package ‘e1071’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
using C++ compiler: ‘g++ (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c Rsvm.c -o Rsvm.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c cmeans.c -o cmeans.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c cshell.c -o cshell.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c floyd.c -o floyd.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c init.c -o init.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c svm.cpp -o svm.o
g++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o e1071.so Rsvm.o cmeans.o cshell.o floyd.o init.o svm.o -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-e1071/00new/e1071/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘e1071’ as ‘e1071_1.7-14_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (e1071)
* installing *source* package ‘ssc’ ...
** package ‘ssc’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** data
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘ssc’ as ‘ssc_2.1-0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ssc)
* installing *source* package ‘crul’ ...
** package ‘crul’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘crul’ as ‘crul_1.4.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (crul)
* installing *source* package ‘EZtune’ ...
** package ‘EZtune’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘EZtune’ as ‘EZtune_3.1.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (EZtune)
* installing *source* package ‘gfonts’ ...
** package ‘gfonts’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘gfonts’ as ‘gfonts_0.2.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (gfonts)
* installing *source* package ‘gdtools’ ...
** package ‘gdtools’ successfully unpacked and MD5 sums checked
** using staged installation
Found pkg-config cflags and libs!
Using PKG_CFLAGS=-I/usr/include/cairo -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/uuid -I/usr/include/freetype2 -I/usr/include/libpng16
Using PKG_LIBS=-lcairo -lfreetype
** libs
using C++ compiler: ‘g++ (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
rm -f gdtools.so CairoContext.o RcppExports.o font_metrics.o gdtools.o raster_to_base64.o versions.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG -I/usr/include/cairo -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/uuid -I/usr/include/freetype2 -I/usr/include/libpng16 -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include'    -fvisibility=hidden -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c CairoContext.cpp -o CairoContext.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG -I/usr/include/cairo -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/uuid -I/usr/include/freetype2 -I/usr/include/libpng16 -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include'    -fvisibility=hidden -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG -I/usr/include/cairo -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/uuid -I/usr/include/freetype2 -I/usr/include/libpng16 -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include'    -fvisibility=hidden -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c font_metrics.cpp -o font_metrics.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG -I/usr/include/cairo -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/uuid -I/usr/include/freetype2 -I/usr/include/libpng16 -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include'    -fvisibility=hidden -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c gdtools.cpp -o gdtools.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG -I/usr/include/cairo -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/uuid -I/usr/include/freetype2 -I/usr/include/libpng16 -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include'    -fvisibility=hidden -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c raster_to_base64.cpp -o raster_to_base64.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG -I/usr/include/cairo -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/uuid -I/usr/include/freetype2 -I/usr/include/libpng16 -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include'    -fvisibility=hidden -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c versions.cpp -o versions.o
g++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o gdtools.so CairoContext.o RcppExports.o font_metrics.o gdtools.o raster_to_base64.o versions.o -lcairo -lfreetype -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-gdtools/00new/gdtools/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘gdtools’ as ‘gdtools_0.3.7_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (gdtools)
* installing *source* package ‘hrbrthemes’ ...
** package ‘hrbrthemes’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘hrbrthemes’ as ‘hrbrthemes_0.8.7_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (hrbrthemes)
* installing *source* package ‘cytofQC’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘cytofQC’ as ‘cytofQC_1.0.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (cytofQC)

The downloaded source packages are in
	‘/tmp/Rtmpa6UQu6/downloaded_packages’
Old packages: 'backports', 'BH', 'bigrquery', 'BiocManager', 'boot', 'brew',
  'brio', 'broom', 'bslib', 'cachem', 'callr', 'cli', 'cluster', 'codetools',
  'commonmark', 'cowplot', 'cpp11', 'crosstalk', 'curl', 'data.table', 'DBI',
  'dbplyr', 'deldir', 'desc', 'digest', 'dplyr', 'dqrng', 'DT', 'evaluate',
  'fansi', 'farver', 'fastmap', 'filelock', 'FNN', 'foreign', 'fs', 'future',
  'future.apply', 'GenomicRanges', 'gert', 'ggplot2', 'ggrepel', 'ggridges',
  'gh', 'globals', 'glue', 'googleAuthR', 'gplots', 'gtable', 'gtools',
  'haven', 'highr', 'htmltools', 'htmlwidgets', 'httpuv', 'httr2', 'igraph',
  'interp', 'jsonlite', 'KernSmooth', 'knitr', 'later', 'lattice', 'leiden',
  'lifecycle', 'listenv', 'locfit', 'matrixStats', 'mgcv', 'munsell', 'nlme',
  'openssl', 'parallelly', 'patchwork', 'pbdZMQ', 'pkgbuild', 'pkgdown',
  'pkgload', 'plotly', 'processx', 'progress', 'promises', 'ps', 'ragg',
  'rapiclient', 'Rcpp', 'RcppAnnoy', 'RcppArmadillo', 'RcppEigen', 'RcppHNSW',
  'RCurl', 'readr', 'remotes', 'repr', 'reprex', 'reticulate', 'rlang',
  'rmarkdown', 'roxygen2', 'rpart', 'rprojroot', 'RSQLite', 'rstudioapi',
  'Rtsne', 'rvest', 'sass', 'scales', 'sctransform', 'scuttle', 'Seurat',
  'SeuratObject', 'shiny', 'sp', 'spatstat.data', 'spatstat.explore',
  'spatstat.geom', 'spatstat.random', 'spatstat.sparse', 'spatstat.utils',
  'stringi', 'stringr', 'survival', 'systemfonts', 'testthat', 'textshaping',
  'tidyr', 'tidyselect', 'timechange', 'tinytex', 'usethis', 'utf8', 'uuid',
  'uwot', 'vctrs', 'vroom', 'waldo', 'withr', 'xfun', 'XML', 'xml2', 'xopen',
  'yaml', 'zip'

real	5m17.287s
user	4m47.372s
sys	0m58.611s
